<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Todo App</title>

  <style>
    :root {
      --bg-primary: #f8fafc;
      --bg-secondary: #ffffff;
      --text-primary: #1e293b;
      --text-secondary: #64748b;
      --border-color: #e2e8f0;
      --primary-color: #6366f1;
      --danger-color: #ef4444;
      --success-color: #22c55e;
      --shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
      --card-radius: 16px;
    }

    [data-theme="dark"] {
      --bg-primary: #0f172a;
      --bg-secondary: #1e293b;
      --text-primary: #f1f5f9;
      --text-secondary: #94a3b8;
      --border-color: #334155;
      --primary-color: #818cf8;
      --danger-color: #f87171;
      --success-color: #4ade80;
      --shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      transition: all 0.3s ease;
    }

    body {
      font-family: system-ui, -apple-system, "Segoe UI", sans-serif;
      background-color: var(--bg-primary);
      color: var(--text-primary);
      line-height: 1.6;
      min-height: 100vh;
      padding: 2rem 1rem;
    }

    .container {
      max-width: 768px;
      margin: 0 auto;
      padding: 2rem;
      background-color: var(--bg-secondary);
      border-radius: var(--card-radius);
      box-shadow: var(--shadow);
    }

    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2.5rem;
      padding-bottom: 1.5rem;
      border-bottom: 2px solid var(--border-color);
    }

    h1 {
      font-size: 2rem;
      font-weight: 800;
      background: linear-gradient(45deg, var(--primary-color), #8b5cf6);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      letter-spacing: -0.5px;
    }

    .theme-toggle {
      background: transparent;
      border: 2px solid var(--border-color);
      color: var(--text-primary);
      padding: 0.75rem;
      border-radius: 12px;
      cursor: pointer;
      width: 45px;
      height: 45px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.25rem;
    }

    .task-form {
      margin-bottom: 3rem;
    }

    .form-content {
      display: grid;
      grid-template-columns: 1fr auto auto;
      gap: 1rem;
      align-items: start;
    }

    input,
    select {
      padding: 0.875rem 1.25rem;
      border: 2px solid var(--border-color);
      border-radius: 12px;
      font-size: 1rem;
      background-color: var(--bg-primary);
      color: var(--text-primary);
      width: 100%;
    }

    input:focus,
    select:focus {
      outline: none;
      border-color: var(--primary-color);
    }

    input::placeholder {
      color: var(--text-secondary);
    }

    button {
      padding: 0.875rem 1.5rem;
      border: none;
      border-radius: 12px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .btn-primary {
      background-color: var(--primary-color);
      color: white;
    }

    .btn-success {
      background-color: var(--success-color);
      color: white;
    }

    .btn-danger {
      background-color: var(--danger-color);
      color: white;
    }

    button:hover {
      transform: translateY(-2px);
      filter: brightness(1.1);
    }

    .tasks {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .task {
      background-color: var(--bg-primary);
      padding: 1.25rem 1.5rem;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      border: 2px solid var(--border-color);
    }

    .task span {
      font-weight: 500;
    }

    .task.completed {
      background-color: var(--bg-secondary);
      border-style: dashed;
    }

    .task.completed span {
      text-decoration: line-through;
      color: var(--text-secondary);
    }

    .task-actions {
      display: flex;
      gap: 0.75rem;
    }

    .task-actions button {
      padding: 0.625rem 1.25rem;
    }

    @media (max-width: 640px) {
      body {
        padding: 1rem 0.5rem;
      }

      .container {
        padding: 1.5rem 1rem;
      }

      .form-content {
        grid-template-columns: 1fr;
      }

      .task {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
        padding: 1.5rem;
      }

      .task-actions {
        width: 100%;
        justify-content: center;
      }

      h1 {
        font-size: 1.75rem;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <div class="header">
      <h1>Task Manager</h1>
      <button class="theme-toggle" id="themeToggle">üåô</button>
    </div>

    <form class="task-form" action="/addTask" method="POST">
      <div class="form-content">
        <input type="text" name="title" placeholder="Add a new task..." required />
        <select name="priority">
          <option value="">Priority</option>
          <option value="Low">Low</option>
          <option value="Medium">Medium</option>
          <option value="High">High</option>
        </select>
        <button type="submit" class="btn-primary">Add Task</button>
      </div>
    </form>

    <div class="tasks">
      <% tasks.forEach(task=> { %>
        <div class="task <%= task.completed ? 'completed' : '' %>">
          <span>
            <%= task.title %> - <%= task.status || "No Priority" %>
            <% console.log(task) %>
          </span>
          <div class="task-actions">
            <form action="/toggle/<%= task.id %>" method="POST" style="display: inline">
              <button class="btn-success" type="submit">
                <%= task.completed ? 'Undo' : 'Complete' %>
              </button>
            </form>
            <form action="/delete/<%= task.id %>" method="POST" style="display: inline">
              <button class="btn-danger" type="submit">Delete</button>
            </form>
          </div>
        </div>
        <% }); %>
    </div>
  </div>

  <script>
    const themeToggle = document.getElementById('themeToggle');
    const body = document.body;

    const savedTheme = localStorage.getItem('theme') || 'light';
    body.setAttribute('data-theme', savedTheme);
    themeToggle.textContent = savedTheme === 'dark' ? '‚òÄÔ∏è' : 'üåô';

    themeToggle.addEventListener('click', () => {
      const currentTheme = body.getAttribute('data-theme');
      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';

      body.setAttribute('data-theme', newTheme);
      localStorage.setItem('theme', newTheme);
      themeToggle.textContent = newTheme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
    });
  </script>
</body>

</html>